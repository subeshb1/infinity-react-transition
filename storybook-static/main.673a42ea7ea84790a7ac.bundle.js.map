{"version":3,"file":"main.673a42ea7ea84790a7ac.bundle.js","sources":["webpack:///./src/index.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport \"./transition.css\";\r\n\r\nexport interface IUITransitionEvent {\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n}\r\nexport interface TransitionProps {\r\n  children: React.ReactElement<React.HTMLAttributes<any>>;\r\n  onTransitionEnd?(\r\n    event: React.TransitionEvent | React.AnimationEvent,\r\n    eventName: string\r\n  ): void;\r\n  transition?: {\r\n    [event: string]: IUITransitionEvent;\r\n  };\r\n  event?: string;\r\n  mount?: IUITransitionEvent;\r\n  unmount?: IUITransitionEvent;\r\n  duration?: string;\r\n  delay?: string;\r\n  property?: string;\r\n  timingFunction?: string;\r\n  style?: React.CSSProperties;\r\n}\r\n\r\nexport class Transition extends React.Component<TransitionProps, any> {\r\n  mount: boolean = true;\r\n  static defaultProps = {\r\n    delay: \"0s\",\r\n    duration: \"1s\",\r\n    timingFunction: \"ease\",\r\n    property: \"all\",\r\n    animationFillMode: \"forwards\",\r\n    mount: {},\r\n    unmount: {}\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.mount = true;\r\n  };\r\n\r\n  transitionEndHandler = (e: React.TransitionEvent | React.AnimationEvent) => {\r\n    if (this.props.onTransitionEnd)\r\n      this.props.onTransitionEnd(e, this.props.event || \"mount\");\r\n  };\r\n\r\n  public render() {\r\n    // Making Sure only one Child is Passed\r\n    React.Children.only(this.props.children);\r\n    const { Child, childProps, transClass, transStyle } = extractProps(\r\n      this.props,\r\n      this.mount\r\n    );\r\n\r\n    return (\r\n      <Child\r\n        {...childProps}\r\n        className={transClass}\r\n        style={transStyle as React.CSSProperties}\r\n        onAnimationEnd={this.transitionEndHandler}\r\n        onTransitionEnd={this.transitionEndHandler}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport const getPropFromEvents = (\r\n  events: { [index: string]: IUITransitionEvent },\r\n  event: string\r\n): IUITransitionEvent => {\r\n  let obj = { style: {}, className: \"\" } as IUITransitionEvent;\r\n  if (event in events) {\r\n    obj = events[event];\r\n  }\r\n  return obj;\r\n};\r\n\r\nfunction extractProps(props: TransitionProps, mounted: boolean) {\r\n  const {\r\n    children: {\r\n      props: childProps,\r\n      props: { className: elemClassName = \"\", style: elemStyle = {} },\r\n      type: Child\r\n    },\r\n    transition = {},\r\n    event,\r\n    delay = 0,\r\n    duration = \"1s\",\r\n    timingFunction = \"ease\",\r\n    property = \"all\",\r\n    mount = {},\r\n    unmount = {},\r\n    ...otherProps\r\n  } = props;\r\n  const mergedEvent = { mount: mount, unmount: unmount, ...transition };\r\n  const { style, className } = getPropFromEvents(\r\n    mergedEvent,\r\n    event ? event : mounted ? \"mount\" : \"\"\r\n  );\r\n  const transStyle = {\r\n    ...elemStyle,\r\n    animationDuration: duration,\r\n    transitionDuration: duration,\r\n    animationDelay: delay,\r\n    transitionDelay: delay,\r\n    transitionTimingFunction: timingFunction,\r\n    animationTimingFunction: timingFunction,\r\n    transitionProperty: property,\r\n    ...style\r\n  };\r\n  const transClass = className + \" \" + elemClassName;\r\n\r\n  return {\r\n    Child,\r\n    transStyle,\r\n    transClass,\r\n    childProps: { ...childProps, ...otherProps },\r\n    eventHandlers: mergedEvent\r\n  };\r\n}\r\n"],"mappings":"AAAA","sourceRoot":""}